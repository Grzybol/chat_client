@page "/chat"
@rendermode InteractiveServer
@inject YourUserNamespace.User user
@inject chat_client.Services.WebSocketService webSocketService
@inject NavigationManager Navigation
@using ChatMessageNamespace
@using chat_client.Services
@using System.Linq
@implements IDisposable

<PageTitle>Chat</PageTitle>

@{
    Console.WriteLine($"Chat.razor: Checking user authorization...");
    bool isAuthorized = user.CheckUserName();
    Console.WriteLine($"Chat.razor: User authorized = {isAuthorized}, Username = '{user.UserName ?? "NULL"}'");
    
    if (!isAuthorized)
    {
        Console.WriteLine("Chat.razor: Redirecting to login...");
        Navigation.NavigateTo("/login");
        return;
    }
}

<link rel="stylesheet" href="css.css">
<div class="chat-container">
    <div class="chat-box">
        <h3>Czat grupowy</h3>
        
        @if (!webSocketService.IsConnected)
        {
            <div class="connection-status error">
                Łączenie z serwerem...
            </div>
        }
        else
        {
            <div class="connection-status success">
                Połączono z serwerem
            </div>
        }

        <div class="messages" id="chat1">
            @foreach (var message in Messages)
            {
                <div class="message @(message.User == "System" ? "system" : "")">
                    <strong>@message.User:</strong> @message.Content
                    <span class="timestamp">@message.Timestamp.ToString("HH:mm")</span>
                </div>
            }
        </div>
        <input @bind="chat_input" @onkeyup="HandleEnterKey" type="text" id="input1" 
               placeholder="Wpisz wiadomość..." disabled="@(!webSocketService.IsConnected)">
        <button @onclick="SendMessageToServer" disabled="@(!webSocketService.IsConnected)">
            Wyślij
        </button>
    </div>
</div>

@code {
    private string chat_input { get; set; } = "";
    private string User { get; set; } = "";
    private List<ChatMessage> Messages = new();

    protected override async Task OnInitializedAsync()
    {
        if (user.CheckUserName())
        {
            User = user.UserName;
            await InitializeWebSocketConnection();
        }
    }

    private async Task InitializeWebSocketConnection()
    {
        try
        {
            Console.WriteLine($"Chat.InitializeWebSocketConnection: IsConnected = {webSocketService.IsConnected}");
            
            webSocketService.OnMessageReceived -= OnMessageReceived;
            webSocketService.OnSystemMessage -= OnSystemMessage;
            webSocketService.OnConnected -= OnWebSocketConnected;
            webSocketService.OnDisconnected -= OnWebSocketDisconnected;
            webSocketService.OnError -= OnWebSocketError;
            
            webSocketService.OnMessageReceived += OnMessageReceived;
            webSocketService.OnSystemMessage += OnSystemMessage;
            webSocketService.OnConnected += OnWebSocketConnected;
            webSocketService.OnDisconnected += OnWebSocketDisconnected;
            webSocketService.OnError += OnWebSocketError;

            if (webSocketService.IsConnected)
            {
                AddSystemMessage("Połączono z serwerem - jesteś w czacie!");
                Console.WriteLine("Chat.razor: Already connected, no need to sign in again");
            }
            else
            {
                Console.WriteLine("Chat.razor: Not connected, attempting to connect...");
                AddSystemMessage("Łączenie z serwerem...");
                await InvokeAsync(StateHasChanged);
                
                bool connected = await webSocketService.ConnectAsync();
                
                if (connected)
                {
                    Console.WriteLine("Chat.razor: Connected successfully, trying to sign in...");
                    bool signedIn = await webSocketService.SignInAsync(User, "dummy_password");
                    
                    if (signedIn)
                    {
                        AddSystemMessage("Zalogowano do czatu!");
                    }
                    else
                    {
                        AddSystemMessage("Błąd logowania do czatu");
                        await Task.Delay(3000);
                        Navigation.NavigateTo("/login");
                    }
                }
                else
                {
                    Console.WriteLine("Chat.razor: Failed to connect");
                    AddSystemMessage("Nie udało się połączyć z serwerem");
                    await Task.Delay(3000);
                    Navigation.NavigateTo("/login");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Chat.InitializeWebSocketConnection error: {ex.Message}");
            AddSystemMessage($"Błąd inicjalizacji: {ex.Message}");
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    private void OnMessageReceived(ChatMessage message)
    {
        InvokeAsync(() =>
        {
            // tutaj sobie zapobiegamy duplikatom
            var isDuplicate = Messages.Any(m => 
                m.User == message.User && 
                m.Content == message.Content && 
                Math.Abs((m.Timestamp - message.Timestamp).TotalSeconds) < 1);
                
            if (!isDuplicate)
            {
                Messages.Add(message);
                StateHasChanged();
            }
            else
            {
                Console.WriteLine($"Duplicate message prevented: {message.User}: {message.Content}");
            }
        });
    }

    private void OnSystemMessage(string content)
    {
        InvokeAsync(() =>
        {
            AddSystemMessage(content);
            StateHasChanged();
        });
    }

    private void OnWebSocketConnected()
    {
        InvokeAsync(() =>
        {
            AddSystemMessage("Połączono z serwerem");
            StateHasChanged();
        });
    }

    private void OnWebSocketDisconnected()
    {
        InvokeAsync(() =>
        {
            AddSystemMessage("Rozłączono z serwerem");
            StateHasChanged();
        });
    }

    private void OnWebSocketError(string error)
    {
        InvokeAsync(() =>
        {
            AddSystemMessage($"Błąd połączenia: {error}");
            StateHasChanged();
        });
    }

    private void AddSystemMessage(string content)
    {
        Messages.Add(new ChatMessage
        {
            User = "System",
            Content = content,
            Timestamp = DateTime.Now
        });
    }

    private async Task SendMessageToServer()
    {
        if (string.IsNullOrWhiteSpace(user?.UserName))
        {
            return;
        }
        
        if (string.IsNullOrWhiteSpace(chat_input))
        {
            return;
        }

        if (!webSocketService.IsConnected)
        {
            AddSystemMessage("Nie połączono z serwerem");
            await InvokeAsync(StateHasChanged);
            return;
        }

        string messageContent = chat_input;
        chat_input = "";

        try
        {
            webSocketService.SendMessage(User, messageContent);
        }
        catch (Exception ex)
        {
            chat_input = messageContent; 
            AddSystemMessage($"Nie udało się wysłać wiadomości: {ex.Message}");
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task HandleEnterKey(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessageToServer();
        }
    }

    public void Dispose()
    {
        webSocketService.OnMessageReceived -= OnMessageReceived;
        webSocketService.OnSystemMessage -= OnSystemMessage;
        webSocketService.OnConnected -= OnWebSocketConnected;
        webSocketService.OnDisconnected -= OnWebSocketDisconnected;
        webSocketService.OnError -= OnWebSocketError;
    }
}