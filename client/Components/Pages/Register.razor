@page "/register"
@rendermode InteractiveServer
@using System.IO
@using System.Text.Json
@inject IWebHostEnvironment Environment 
@inject NavigationManager NavigationManager 
@using ClientCommunication
@using System.Text.Json
@using ChatMessageNamespace

<div class="register-container">

    <h1>Strona Rejestracji</h1>

    <form class="pure-form" @onsubmit="HandleRegister" @onsubmit:preventDefault>

        <input @bind="registerModel.Username" type="text" placeholder="Nazwa użytkownika" required />
        <input @bind="registerModel.Password" type="password" placeholder="Hasło" required />
        <input @bind="registerModel.ConfirmPassword" type="password" placeholder="Powtórz hasło" required />

        <button type="submit"><i class="fa fa-user-plus"></i> Zarejestruj</button>
    </form>

    @if (!string.IsNullOrEmpty(Message))
    {
        <p class="register-message @(IsError ? "error" : "success")">@Message</p> 
    }

</div>

@code {
    private RegisterModel registerModel = new RegisterModel();
    private string Message { get; set; } = "";
    private bool IsError { get; set; }

    private async Task HandleRegister()
    {
        Message = "";
        IsError = false;

        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            Message = "Hasła nie są zgodne!";
            IsError = true;
            return;
        }

        if (string.IsNullOrWhiteSpace(registerModel.Username) || registerModel.Password.Length < 3)
        {
            Message = "Nazwa użytkownika i hasło (min 3 znaki) są wymagane";
            IsError = true;
            return;
        }

        try
        {
            bool registered = await ClientSocket.Register(registerModel.Username, registerModel.Password);

            if (registered)
            {
                Message = "Rejestracja zakończona pomyślnie!";
                IsError = false;
                await Task.Delay(2500); // Short delay before redirect
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                Message = "Rejestracja nie powiodła się. Użytkownik może już istnieje.";
                IsError = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas rejestracji: {ex.Message}");
            Message = "Wystąpił błąd podczas rejestracji.";
            IsError = true;
        }
    }

    public class RegisterModel
    {
        public string Username { get; set; } = "";
        public string Password { get; set; } = "";
        public string ConfirmPassword { get; set; } = "";
    }
}
