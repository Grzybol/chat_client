@page "/register"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager 
@inject YourUserNamespace.User user
@using ClientCommunication
@using System.Text.Json
@using ChatMessageNamespace

<div class="register-container">
    <h1>Rejestracja</h1>
    
    <form class="pure-form" @onsubmit="HandleRegister" @onsubmit:preventDefault> 
        <input @bind="UsernameInput" type="text" placeholder="Nazwa użytkownika" required />
        <input @bind="PasswordInput" type="password" placeholder="Hasło" required />
        <input @bind="ConfirmPasswordInput" type="password" placeholder="Potwierdź hasło" required />
        <button type="submit"><i class="fa fa-user-plus"></i> Zarejestruj</button>
    </form>

    @if (!string.IsNullOrEmpty(Message))
    {
        <p class="register-message @(IsError ? "error" : "success")">@Message</p>
    }

    <p style="text-align: center; margin-top: 20px;">
        Masz już konto? <a href="/login">Zaloguj się</a>
    </p>
</div>

@code {
    private string UsernameInput { get; set; } = ""; 
    private string PasswordInput { get; set; } = ""; 
    private string ConfirmPasswordInput { get; set; } = ""; 
    private string Message { get; set; } = ""; 
    private bool IsError { get; set; }

    private async Task HandleRegister() 
    {
        Message = ""; 
        IsError = false;
        
        Console.WriteLine($"Próba rejestracji: Username: {UsernameInput}");

        if (string.IsNullOrWhiteSpace(UsernameInput) || string.IsNullOrWhiteSpace(PasswordInput))
        {
            Message = "Podaj nazwę użytkownika i hasło.";
            IsError = true;
            return;
        }

        if (PasswordInput != ConfirmPasswordInput)
        {
            Message = "Hasła nie są identyczne.";
            IsError = true;
            return;
        }

        if (PasswordInput.Length < 3)
        {
            Message = "Hasło musi mieć co najmniej 3 znaki.";
            IsError = true;
            return;
        }

        bool registerSuccess = false;

        try
        {
            registerSuccess = await ClientSocket.Register(UsernameInput, PasswordInput);
        }
        catch (Exception ex)
        {
            Message = $"Błąd połączenia: {ex.Message}";
            IsError = true;
            return;
        }

        if (registerSuccess)
        {
            Message = "Rejestracja zakończona pomyślnie. Możesz się teraz zalogować.";
            IsError = false;
            
            UsernameInput = "";
            PasswordInput = "";
            ConfirmPasswordInput = "";
            
            await Task.Delay(2000);
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            Message = "Błąd rejestracji. Użytkownik może już istnieć.";
            IsError = true;
        }
    }
}