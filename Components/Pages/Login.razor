@page "/login"
@rendermode InteractiveServer
@inject Services.IAuthService AuthService 
@inject NavigationManager NavigationManager 

<div class="login-container">
    <h1>Logowanie</h1>
    

    <form class="pure-form" @onsubmit="HandleLogin" @onsubmit:preventDefault> 
        <input @bind="LoginInput" type="text" placeholder="Nazwa użytkownika" required />
        <input @bind="PasswordInput" type="password" placeholder="Hasło" required />
        <button type="submit"><i class="fa fa-chevron-circle-right"></i> Zaloguj</button>
    </form>

    @if (!string.IsNullOrEmpty(Message))
    {
        <p class="login-message @(IsError ? "error" : "success")">@Message</p>
    }

</div>

@code {
    private string LoginInput { get; set; } = ""; 
    private string PasswordInput { get; set; } = ""; 
    private string Message { get; set; } = ""; 
    private bool IsError { get; set; } 

    private async Task HandleLogin() 
    {
        Message = ""; 
        IsError = false;
        
        // Logika walidacji i logowania
        Console.WriteLine($"Próba logowania: Login: {LoginInput}, Password: {PasswordInput}");

        // ---- Przykładowa logika do testowania bez serwisu ----
        if (LoginInput == "admin" && PasswordInput == "password") {
             Message = "Zalogowano poprawnie (test)";
             IsError = false;
             // NavigationManager.NavigateTo("/");
        } else if (!string.IsNullOrEmpty(LoginInput) || !string.IsNullOrEmpty(PasswordInput)) {
             Message = "Błędny login lub hasło (test)";
             IsError = true;
        }
    }
}
